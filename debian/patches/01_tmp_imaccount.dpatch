#! /bin/sh /usr/share/dpatch/dpatch-run
## 01_Temp_fix_Accounts.dpatch by  <siraj.razick@collabora.co.uk>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Temporary Fixes for IMAccount Bugs
sjfaslkjfjf
@DPATCH@

diff --git a/plugins/telepathy/telepathyplugin.cpp b/plugins/telepathy/telepathyplugin.cpp
index b46daf9..415caaf 100644
--- a/plugins/telepathy/telepathyplugin.cpp
+++ b/plugins/telepathy/telepathyplugin.cpp
@@ -23,10 +23,6 @@
 #include "trackersink.h"
 // Telepathy support
 #include <telepathycontroller.h>
-// Qt Tracker
-#include <QtTracker/Tracker>
-#include <QtTracker/QLive>
-#include <QtTracker/ontologies/nco.h>
 
 
 using namespace SopranoLive;
@@ -266,11 +262,12 @@ void TelepathyPlugin::saveIMAccount(Tp::AccountPtr account, TelepathyAccount::Ch
 
 
     QUrl accountUrl("telepathy:" + account->objectPath());
-    RDFVariable theAccount = RDFVariable::fromType<nco::IMAccount>();
+    RDFVariable theAccount(accountUrl);
+    
     Live<nco::IMAccount> liveAccount = ::tracker()->liveNode(accountUrl);
 
     RDFUpdate up;
-    up.addInsertion(theAccount, nco::IMAccount::iri(), liveAccount.variable());
+    up.addInsertion(RDFStatement(theAccount, rdf::type::iri(), nco::IMAccount::iri()));
     ::tracker()->executeQuery(up);
 
     accountModelReady(account);
@@ -317,16 +314,16 @@ void TelepathyPlugin::accountModelReady(Tp::AccountPtr account)
      QString filename;
      bool ok = saveAvatar(account->avatar().avatarData, account->avatar().MIMEType, QDir::homePath()
              + "/.contacts/avatars/", filename);
+     qDebug() << Q_FUNC_INFO << filename << ok;
+
+     if (filename.isEmpty()) {
+         ok = false;
+     } else {
+         ok = true;
+     }
+
+     updateAvatar(imAddressUrl,  QUrl::fromLocalFile(filename), ok);
 
-    if (ok) {
-        Live<nie::DataObject> fileUrl = ::tracker()->liveNode(QUrl(filename));
-        addressInfo->addImAvatar(fileUrl);  
-        Live<nie::DataObject> photo = me->getPhoto();
-        if (photo->getUrl().isEmpty()) {
-            me->setPhoto(fileUrl);
-        }
-    }
-    
      me->addHasIMAddress(addressInfo);
      // Writing local UID for default-contact-me
      const QString strLocalUID = QString::number(0x7FFFFFFF);
@@ -337,6 +334,28 @@ void TelepathyPlugin::accountModelReady(Tp::AccountPtr account)
      }
 
 }
+//"telepathy:" + accountPath + '!' +  imId
+void TelepathyPlugin::updateAvatar(const QUrl& url, const QUrl& fileName, const bool deleteOnly)
+{
+    if (!fileName.isValid()) {
+        return;
+    }
+    
+    RDFUpdate update;
+    RDFVariable imAddress(url);
+    RDFVariable dataObject(fileName);
+
+    if (!fileName.isEmpty()) {
+        update.addDeletion(imAddress, nco::imAvatar::iri());
+    }
+
+    if (deleteOnly) {
+       update.addInsertion(RDFStatement(dataObject, rdf::type::iri(), nie::DataObject::iri()));
+       update.addInsertion(RDFStatement(imAddress, nco::imAvatar::iri(), dataObject));
+    }
+  
+    ::tracker()->executeQuery(update);
+}
 
 bool TelepathyPlugin::saveAvatar(const QByteArray& data, const QString& mime, const QString& path,
                                  QString& fileName )
diff --git a/plugins/telepathy/telepathyplugin.h b/plugins/telepathy/telepathyplugin.h
index c471230..20b2ce3 100644
--- a/plugins/telepathy/telepathyplugin.h
+++ b/plugins/telepathy/telepathyplugin.h
@@ -27,6 +27,11 @@
 #include <TelepathyQt4/Types>
 // Qt
 #include <QObject>
+// Qt Tracker
+#include <QtTracker/Tracker>
+#include <QtTracker/QLive>
+#include <QtTracker/ontologies/nco.h>
+#include <QtTracker/ontologies/nie.h>
 
 class TrackerSink;
 class PendingRosters;
@@ -74,6 +79,7 @@ private Q_SLOTS:
 private:
     void saveIMAccount(Tp::AccountPtr account, TelepathyAccount::Changes changes);
     bool saveAvatar(const QByteArray&, const QString&, const QString&, QString&);
+    void updateAvatar(const QUrl& uri, const QUrl& fileName, const bool);
 
     TelepathyController* m_tpController;
     TrackerSink* mStore;
@@ -83,4 +89,5 @@ private:
     QList<Tp::ConnectionPtr> mConnections;
     AccountServiceMapper accountServiceMapper;
     bool mImportActive;
+    SopranoLive::LiveNodes mQuery;
 };
